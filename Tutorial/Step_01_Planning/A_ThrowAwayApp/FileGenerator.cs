using System.Text;
using A_ThrowAwayApp.Models;

namespace A_ThrowAwayApp;


internal class FileGenerator
{
	public static string GetTemplate(GeneratorInformation generatorInformation, int generationCount)
	{
		var classInformation = generatorInformation.ClassInformation;
		var interfaceInformation = generatorInformation.InterfaceInformation;

		string fieldBackers = GetAllFieldBackers(interfaceInformation!);
		string objectAssignment = GetAllObjectAssignment(interfaceInformation!);
		string withProperties = GetAllWithProperties(generatorInformation);

		return $@"#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
#nullable disable

//  Generation count: {generationCount}
// {DateTime.Now}

// ================================================================================
// <auto-generated>
//
//  This code was generated by a Source Code Generator
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//
// </auto-generated>
// ================================================================================

namespace {interfaceInformation!.Namespace};


public partial class {classInformation!.ClassName} : Builder<MyBuilderName>
{{
{fieldBackers}

    public override MyBuilderName Build()
    {{
        BuilderObject = new MyBuilderName
        {{
{objectAssignment}
        }});

        PostBuild(BuilderObject.Value);

        return BuilderObject.Value;
    }}


    //
    //  Default Constructor
    //

    public static MyClassName Default()
    {{
        return new MyClassName();
    }}

    //
    //  With Properties
    //
{withProperties}
}}

#nullable restore
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.";
	}


	public static string GetAllFieldBackers(ClassInformation classInfo)
	{
		StringBuilder sb = new StringBuilder(10000);

		foreach (PropertyInformation item in classInfo.Properties)
			sb.AppendLine(GetFieldBackers(item));

		return sb.ToString();
	}


	public static string GetFieldBackers(PropertyInformation property)
	{
		return "\t\tSomeProperty";
	}


	private static string GetAllObjectAssignment(ClassInformation classInfo)
	{
		StringBuilder sb = new StringBuilder(10000);

		foreach (PropertyInformation item in classInfo.Properties)
			sb.AppendLine(GetObjectAssignment(item));

		return sb.ToString();
	}


	private static string GetObjectAssignment(PropertyInformation property)
	{
		return "\t\t\tSomeField";
	}


	private static string GetWithProperties(string builderName, PropertyInformation property)
	{
		return "\tSomeOtherProperty\n";
	}


	private static string GetRemoveProperties(string builderName, PropertyInformation property)
	{
		return "\tAnotherProperty\n";
	}

	private static string GetAllWithProperties(GeneratorInformation generatorInformation)
	{
		StringBuilder sb = new StringBuilder(10000);

		foreach (PropertyInformation item in generatorInformation.InterfaceInformation!.Properties)
		{
			sb.Append(GetWithProperties(generatorInformation.ClassInformation!.ClassName, item));
			sb.Append(GetRemoveProperties(generatorInformation.ClassInformation.ClassName, item));
		}

		return sb.ToString();
	}
}
