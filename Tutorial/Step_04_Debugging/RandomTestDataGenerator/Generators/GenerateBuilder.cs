namespace WebbertSolutions.Generators;

internal static class GenerateBuilder
{
	public static string GetTemplate(GeneratorInformation generatorInformation, int generationCount)
	{
		var classInformation = generatorInformation.ClassInformation;
		var interfaceInformation = generatorInformation.InterfaceInformation;

		string attributeNamespace = classInformation!.Namespace;

		string fieldBackers = GetAllFieldBackers(interfaceInformation!);
		string objectAssignment = GetAllObjectAssignment(interfaceInformation!);
		string withProperties = GetAllWithProperties(generatorInformation);

		return $@"#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
#nullable disable

//  Generation count: {generationCount}
// {DateTime.Now}

// ================================================================================
// <auto-generated>
//
//  This code was generated by a Source Code Generator
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//
// </auto-generated>
// ================================================================================

namespace {classInformation!.Namespace};


public partial class {classInformation.ClassName} : Builder<{interfaceInformation!.ClassName}>
{{
{fieldBackers}

    public override {interfaceInformation.ClassName} Build()
    {{
        if (BuilderObject?.IsValueCreated != true)
        {{
            BuilderObject = new Lazy<{interfaceInformation.ClassName}>(new {interfaceInformation.ClassName}
            {{
{objectAssignment}
            }});
        }}

        PostBuild(BuilderObject.Value);

        return BuilderObject.Value;
    }}


    //
    //  Default Constructor
    //

    public static {classInformation.ClassName} Default()
    {{
        return new {classInformation.ClassName}();
    }}

    //
    //  With Properties
    //
{withProperties}
}}

#nullable restore
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.";
	}


	public static string GetAllFieldBackers(ClassInformation classInfo)
	{
		StringBuilder sb = new StringBuilder(10000);

		foreach (PropertyInformation item in classInfo.Properties)
			sb.AppendLine(GetFieldBackers(item));

		return sb.ToString();
	}


	public static string GetFieldBackers(PropertyInformation property)
	{
		return $"\tprivate Lazy<{property.DataType}> {property.FieldName} = new (default({property.DataType}));";
	}


	private static string GetAllObjectAssignment(ClassInformation classInfo)
	{
		StringBuilder sb = new StringBuilder(10000);

		foreach (PropertyInformation item in classInfo.Properties)
			sb.AppendLine(GetObjectAssignment(item));

		if (sb.Length > 3)
			sb.Length -= 3;

		return sb.ToString();
	}


	private static string GetObjectAssignment(PropertyInformation property)
	{
		return $"\t\t\t\t{property.PropertyName} = {property.FieldName}.Value,";
	}


	private static string GetWithProperties(string builderName, PropertyInformation property)
	{
		return $@"
    public {builderName} With{property.PropertyName}({property.DataType} value)
    {{
        return With{property.PropertyName}(() => value);
    }}
    
    public {builderName} With{property.PropertyName}(Func<{property.DataType}> func)
    {{
        {property.FieldName} = new Lazy<{property.DataType}>(func);
        return this;
    }}
";
	}


	private static string GetRemoveProperties(string builderName, PropertyInformation property)
	{
		return $@"
    public {builderName} SetDefault{property.PropertyName}({property.DataType} newValue = default)
    {{
		{property.FieldName} = new Lazy<{property.DataType}>(newValue);
        return this;
    }}
";
	}

	private static string GetAllWithProperties(GeneratorInformation generatorInformation)
	{
		StringBuilder sb = new StringBuilder(10000);

		foreach (PropertyInformation item in generatorInformation.InterfaceInformation!.Properties)
		{
			sb.Append(GetWithProperties(generatorInformation.ClassInformation!.ClassName, item));
			sb.Append(GetRemoveProperties(generatorInformation.ClassInformation.ClassName, item));
		}

		if (sb.Length > 2)
			sb.Length -= 2;

		return sb.ToString();
	}
}
